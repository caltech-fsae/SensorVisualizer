// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: obstacle.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Obstacle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var translation: Obstacle.Translate {
    get {return _storage._translation ?? Obstacle.Translate()}
    set {_uniqueStorage()._translation = newValue}
  }
  /// Returns true if `translation` has been explicitly set.
  var hasTranslation: Bool {return _storage._translation != nil}
  /// Clears the value of `translation`. Subsequent reads from it will return its default value.
  mutating func clearTranslation() {_storage._translation = nil}

  var size: Obstacle.Size {
    get {return _storage._size ?? Obstacle.Size()}
    set {_uniqueStorage()._size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {_storage._size = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Translate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Double {
      get {return _x ?? 0}
      set {_x = newValue}
    }
    /// Returns true if `x` has been explicitly set.
    var hasX: Bool {return self._x != nil}
    /// Clears the value of `x`. Subsequent reads from it will return its default value.
    mutating func clearX() {self._x = nil}

    var y: Double {
      get {return _y ?? 0}
      set {_y = newValue}
    }
    /// Returns true if `y` has been explicitly set.
    var hasY: Bool {return self._y != nil}
    /// Clears the value of `y`. Subsequent reads from it will return its default value.
    mutating func clearY() {self._y = nil}

    var z: Double {
      get {return _z ?? 0}
      set {_z = newValue}
    }
    /// Returns true if `z` has been explicitly set.
    var hasZ: Bool {return self._z != nil}
    /// Clears the value of `z`. Subsequent reads from it will return its default value.
    mutating func clearZ() {self._z = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _x: Double? = nil
    fileprivate var _y: Double? = nil
    fileprivate var _z: Double? = nil
  }

  struct Size {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var height: Double {
      get {return _height ?? 0}
      set {_height = newValue}
    }
    /// Returns true if `height` has been explicitly set.
    var hasHeight: Bool {return self._height != nil}
    /// Clears the value of `height`. Subsequent reads from it will return its default value.
    mutating func clearHeight() {self._height = nil}

    var radius: Double {
      get {return _radius ?? 0}
      set {_radius = newValue}
    }
    /// Returns true if `radius` has been explicitly set.
    var hasRadius: Bool {return self._radius != nil}
    /// Clears the value of `radius`. Subsequent reads from it will return its default value.
    mutating func clearRadius() {self._radius = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _height: Double? = nil
    fileprivate var _radius: Double? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Obstacle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Obstacle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "translation"),
    2: .same(proto: "size"),
  ]

  fileprivate class _StorageClass {
    var _translation: Obstacle.Translate? = nil
    var _size: Obstacle.Size? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _translation = source._translation
      _size = source._size
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._translation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._size)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._translation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._size {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Obstacle) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._translation != other_storage._translation {return false}
        if _storage._size != other_storage._size {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Obstacle.Translate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Obstacle.protoMessageName + ".Translate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._x)
      case 2: try decoder.decodeSingularDoubleField(value: &self._y)
      case 3: try decoder.decodeSingularDoubleField(value: &self._z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Obstacle.Translate) -> Bool {
    if self._x != other._x {return false}
    if self._y != other._y {return false}
    if self._z != other._z {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Obstacle.Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Obstacle.protoMessageName + ".Size"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "radius"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._height)
      case 2: try decoder.decodeSingularDoubleField(value: &self._radius)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._height {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._radius {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Obstacle.Size) -> Bool {
    if self._height != other._height {return false}
    if self._radius != other._radius {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
